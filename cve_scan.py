"""CLI for scanning for evidence."""

import argparse

import core
import util


def parse_cmd_args():
    """Parse command-line arguments."""
    # Make the parser
    parser = argparse.ArgumentParser(prog="cve_scan")

    # Scan mode
    parser.add_argument(
        "--mode",
        choices=["both", "mac", "iphone"],
        default="both",
        help="Scanning mode",
    )

    # Scanning methods used
    parser.add_argument(
        "--method",
        choices=["both", "attachments", "datausagedb"],
        default="both",
        help="Which methods to use when scanning",
    )

    # Backup selectionn
    parser.add_argument(
        "--backups",
        choices=["all", "newest", "oldest"],
        default="all",
        help="Which backups to scan (irrelevant if using mac mode)",
    )

    # Do the parse
    return parser.parse_args()


def main(args):
    """Handle the CLI command."""
    # Track if anything was bad
    anything_suspicious = False
    anything_bad = False
    dump_dirs_all = []

    # Unpack into bools
    mode_mac = args.mode in ["both", "mac"]
    mode_iphone = args.mode in ["both", "iphone"]
    method_attachments = args.method in ["both", "attachments"]
    method_datausagedb = args.method in ["both", "datausagedb"]

    # Scan for mac if desired
    if mode_mac:
        print(util.eqbound("Scanning local machine"))
        if method_attachments:
            print("Checking attachments")
            path = "~/Library/Messages/Attachments"
            out = core.check_attachments(path)
            anything_suspicious = anything_suspicious or out
        else:
            print("Cannot scan datausagedb for mac")

    # Scan for iphone if desired
    if mode_iphone:
        print(util.eqbound("Scanning iphone backups"))
        print("Searching for backups")
        backups = core.get_backup_data()
        if backups:
            # Filter if only newest or oldest backup desired
            if args.backups == "newest":
                backups = [sorted(backups, key=lambda v: v[2], reverse=True)[0]]
            elif args.backups == "oldest":
                backups = [sorted(backups, key=lambda v: v[2], reverse=False)[0]]

            # Scan all relevant backups
            for backup in backups:
                udid, datetime_str, datetime = backup
                print(f"Scanning backup {udid} from {datetime_str}")
                print("Extracting data from backup")
                dump_dir = core.dump_backup_data(
                    udid, attachments=method_attachments, datausagedb=method_datausagedb
                )
                dump_dirs_all.append(dump_dir)

                # Scan attachments
                if method_attachments:
                    print("Checking attachments")
                    out = core.check_attachments(dump_dir)
                    anything_suspicious = anything_suspicious or out

                # Scan datausage db
                if method_datausagedb:
                    print("Checking datausage db")
                    path = dump_dir + "/Wireless/Library/Databases/DataUsage.sqlite"
                    out = core.check_database(path)
                    anything_bad = anything_bad or out

    print(util.eqbound("Scans complete"))

    if anything_bad:
        print("> Found evidence of successful attack.")
    elif anything_suspicious:
        print("> Found evidence of attempted attack.")
    else:
        print("> Found no evidence of attempted or successful attack.")

    if mode_iphone:
        if anything_suspicious or anything_bad:
            print("> Preserving backup data in:")
            for dump_dir in dump_dirs_all:
                print(f">\t{dump_dir}")
        else:
            print("> Wiping backup data")
            for dump_dir in dump_dirs_all:
                util.wipe_dir(dump_dir)

    print("Done")


if __name__ == "__main__":
    args = parse_cmd_args()
    main(args)
